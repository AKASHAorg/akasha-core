fragment ReflectFragment on AkashaReflect{
  id
  author {
    id
    isViewer
  }
  version
  active
  content {
    label
    propertyType
    value
  }
  isReply
  reflection
  beam {
    id
    author{
      id
      isViewer
    }
  }
  nsfw
}

query GetReflectionsFromBeam($id: ID!, $after: String, $before: String, $first: Int, $last: Int){
  node(id: $id){
    ... on AkashaBeam{
      reflections(after: $after, before: $before, first: $first, last: $last) {
        edges{
          node{
            ...ReflectFragment
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}

query GetReflectionsByAuthorDid($id: ID!, $after: String, $before: String, $first: Int, $last: Int){
  node(id: $id){
    ... on CeramicAccount{
      akashaReflectList(after: $after, before: $before, first: $first, last: $last){
        edges{
          node{
            ...ReflectFragment
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
      isViewer
    }
  }
}

# should be CeramicStreamID instead of String for $id
#
query GetReflectReflections($id: String!, $after: String, $before: String, $first: Int, $last: Int, $sorting: AkashaReflectSortingInput){
  akashaReflectIndex(after: $after, before: $before, first: $first, last: $last, filters: {where: {reflection: {equalTo: $id}}}, sorting: $sorting){
    edges{
      node{
          ...ReflectFragment
      }
      cursor
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

mutation CreateReflect($i: CreateAkashaReflectInput!){
  createAkashaReflect(input: $i){
    document {
      ...ReflectFragment
    }
    clientMutationId
  }
}

mutation UpdateAkashaReflect($i: UpdateAkashaReflectInput!){
  updateAkashaReflect(input: $i){
    document {
      ...ReflectFragment
    }
    clientMutationId
  }
}

