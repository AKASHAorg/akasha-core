fragment CommentFragment on Comment{
  author {
    id
  }
  version
  active
  content {
    provider
    property
    value
  }
  isReply
  repliesCount
  post {
    id
    author{
      id
    }
  }
}

query GetCommentsFromPost($id: ID!, $after: String, $before: String, $first: Int, $last: Int){
  node(id: $id){
    ... on Post{
      comments(after: $after, before: $before, first: $first, last: $last) {
        edges{
          node{
            ...CommentFragment
          }
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}

query GetCommentsByAuthorDid($id: ID!, $after: String, $before: String, $first: Int, $last: Int){
  node(id: $id){
    ... on CeramicAccount{
      commentList(after: $after, before: $before, first: $first, last: $last){
        edges{
          node{
            ...CommentFragment
          }
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}

query GetCommentReplies($id: ID!, $after: String, $before: String, $first: Int, $last: Int){
  node(id: $id){
    ...on Comment{
      replies(after: $after, before: $before, first: $first, last: $last){
        edges{
          node{
            reply{
            ...CommentFragment
            }
          }
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}

mutation CreateComment($i: CreateCommentInput!){
  createComment(input: $i){
    document {
      ...CommentFragment
    }
    clientMutationId
  }
}

mutation UpdateComment($i: UpdateCommentInput!){
  updateComment(input: $i){
    document {
      ...CommentFragment
    }
    clientMutationId
  }
}

mutation CreateCommentReply($i: CreateCommentReplyInput!){
  createCommentReply(input: $i){
    document {
      active
      comment {
        ...CommentFragment
      }
      reply {
        ...CommentFragment
      }
    }
  }
}

mutation UpdateCommentReply($i: UpdateCommentReplyInput!){
  updateCommentReply(input: $i){
    document {
      active
      comment {
        ...CommentFragment
      }
      reply {
        ...CommentFragment
      }
    }
  }
}
