type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  akashaAppIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppFiltersInput
    sorting: AkashaAppSortingInput
  ): AkashaAppConnection
  akashaAppCount(filters: AkashaAppFiltersInput): Int!
  akashaAppInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppInterfaceFiltersInput
    sorting: AkashaAppInterfaceSortingInput
  ): AkashaAppInterfaceConnection
  akashaAppInterfaceCount(filters: AkashaAppInterfaceFiltersInput): Int!
  akashaAppReleaseIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppReleaseFiltersInput
    sorting: AkashaAppReleaseSortingInput
  ): AkashaAppReleaseConnection
  akashaAppReleaseCount(filters: AkashaAppReleaseFiltersInput): Int!
  akashaAppReleaseInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppReleaseInterfaceFiltersInput
    sorting: AkashaAppReleaseInterfaceSortingInput
  ): AkashaAppReleaseInterfaceConnection
  akashaAppReleaseInterfaceCount(filters: AkashaAppReleaseInterfaceFiltersInput): Int!
  akashaAppsStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppsStreamFiltersInput
    sorting: AkashaAppsStreamSortingInput
  ): AkashaAppsStreamConnection
  akashaAppsStreamCount(filters: AkashaAppsStreamFiltersInput): Int!
  akashaBeamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamFiltersInput
    sorting: AkashaBeamSortingInput
  ): AkashaBeamConnection
  akashaBeamCount(filters: AkashaBeamFiltersInput): Int!
  akashaBeamInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamInterfaceFiltersInput
    sorting: AkashaBeamInterfaceSortingInput
  ): AkashaBeamInterfaceConnection
  akashaBeamInterfaceCount(filters: AkashaBeamInterfaceFiltersInput): Int!
  akashaBeamStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamStreamFiltersInput
    sorting: AkashaBeamStreamSortingInput
  ): AkashaBeamStreamConnection
  akashaBeamStreamCount(filters: AkashaBeamStreamFiltersInput): Int!
  akashaBlockStorageIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBlockStorageFiltersInput
    sorting: AkashaBlockStorageSortingInput
  ): AkashaBlockStorageConnection
  akashaBlockStorageCount(filters: AkashaBlockStorageFiltersInput): Int!
  akashaContentBlockIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockFiltersInput
    sorting: AkashaContentBlockSortingInput
  ): AkashaContentBlockConnection
  akashaContentBlockCount(filters: AkashaContentBlockFiltersInput): Int!
  akashaContentBlockInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockInterfaceFiltersInput
    sorting: AkashaContentBlockInterfaceSortingInput
  ): AkashaContentBlockInterfaceConnection
  akashaContentBlockInterfaceCount(filters: AkashaContentBlockInterfaceFiltersInput): Int!
  akashaContentBlockStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockStreamFiltersInput
    sorting: AkashaContentBlockStreamSortingInput
  ): AkashaContentBlockStreamConnection
  akashaContentBlockStreamCount(filters: AkashaContentBlockStreamFiltersInput): Int!
  akashaFollowIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaFollowFiltersInput
    sorting: AkashaFollowSortingInput
  ): AkashaFollowConnection
  akashaFollowCount(filters: AkashaFollowFiltersInput): Int!
  akashaFollowInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaFollowInterfaceFiltersInput
    sorting: AkashaFollowInterfaceSortingInput
  ): AkashaFollowInterfaceConnection
  akashaFollowInterfaceCount(filters: AkashaFollowInterfaceFiltersInput): Int!
  akashaIndexStreamInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaIndexStreamInterfaceFiltersInput
    sorting: AkashaIndexStreamInterfaceSortingInput
  ): AkashaIndexStreamInterfaceConnection
  akashaIndexStreamInterfaceCount(filters: AkashaIndexStreamInterfaceFiltersInput): Int!
  akashaIndexedStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaIndexedStreamFiltersInput
    sorting: AkashaIndexedStreamSortingInput
  ): AkashaIndexedStreamConnection
  akashaIndexedStreamCount(filters: AkashaIndexedStreamFiltersInput): Int!
  akashaInterestsStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaInterestsStreamFiltersInput
    sorting: AkashaInterestsStreamSortingInput
  ): AkashaInterestsStreamConnection
  akashaInterestsStreamCount(filters: AkashaInterestsStreamFiltersInput): Int!
  akashaProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaProfileFiltersInput
    sorting: AkashaProfileSortingInput
  ): AkashaProfileConnection
  akashaProfileCount(filters: AkashaProfileFiltersInput): Int!
  akashaProfileInterestsIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AkashaProfileInterestsConnection
  akashaProfileInterestsCount: Int!
  akashaProfileInterestsInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AkashaProfileInterestsInterfaceConnection
  akashaProfileInterestsInterfaceCount: Int!
  akashaProfileInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaProfileInterfaceFiltersInput
    sorting: AkashaProfileInterfaceSortingInput
  ): AkashaProfileInterfaceConnection
  akashaProfileInterfaceCount(filters: AkashaProfileInterfaceFiltersInput): Int!
  akashaProfileStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaProfileStreamFiltersInput
    sorting: AkashaProfileStreamSortingInput
  ): AkashaProfileStreamConnection
  akashaProfileStreamCount(filters: AkashaProfileStreamFiltersInput): Int!
  akashaReflectIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectFiltersInput
    sorting: AkashaReflectSortingInput
  ): AkashaReflectConnection
  akashaReflectCount(filters: AkashaReflectFiltersInput): Int!
  akashaReflectInterfaceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectInterfaceFiltersInput
    sorting: AkashaReflectInterfaceSortingInput
  ): AkashaReflectInterfaceConnection
  akashaReflectInterfaceCount(filters: AkashaReflectInterfaceFiltersInput): Int!
  akashaReflectStreamIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectStreamFiltersInput
    sorting: AkashaReflectStreamSortingInput
  ): AkashaReflectStreamConnection
  akashaReflectStreamCount(filters: AkashaReflectStreamFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  akashaApp(with: WithAkashaAppInput!): AkashaApp
  akashaAppInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppInterfaceFiltersInput
    sorting: AkashaAppInterfaceSortingInput
  ): AkashaAppInterfaceConnection
  akashaAppInterfaceListCount(filters: AkashaAppInterfaceFiltersInput): Int!
  akashaAppList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppFiltersInput
    sorting: AkashaAppSortingInput
  ): AkashaAppConnection
  akashaAppListCount(filters: AkashaAppFiltersInput): Int!
  akashaAppRelease(with: WithAkashaAppReleaseInput!): AkashaAppRelease
  akashaAppReleaseInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppReleaseInterfaceFiltersInput
    sorting: AkashaAppReleaseInterfaceSortingInput
  ): AkashaAppReleaseInterfaceConnection
  akashaAppReleaseInterfaceListCount(filters: AkashaAppReleaseInterfaceFiltersInput): Int!
  akashaAppReleaseList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppReleaseFiltersInput
    sorting: AkashaAppReleaseSortingInput
  ): AkashaAppReleaseConnection
  akashaAppReleaseListCount(filters: AkashaAppReleaseFiltersInput): Int!
  akashaAppsStream(with: WithAkashaAppsStreamInput!): AkashaAppsStream
  akashaAppsStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaAppsStreamFiltersInput
    sorting: AkashaAppsStreamSortingInput
  ): AkashaAppsStreamConnection
  akashaAppsStreamListCount(filters: AkashaAppsStreamFiltersInput): Int!
  akashaBeamInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamInterfaceFiltersInput
    sorting: AkashaBeamInterfaceSortingInput
  ): AkashaBeamInterfaceConnection
  akashaBeamInterfaceListCount(filters: AkashaBeamInterfaceFiltersInput): Int!
  akashaBeamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamFiltersInput
    sorting: AkashaBeamSortingInput
  ): AkashaBeamConnection
  akashaBeamListCount(filters: AkashaBeamFiltersInput): Int!
  akashaBeamStream(with: WithAkashaBeamStreamInput!): AkashaBeamStream
  akashaBeamStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBeamStreamFiltersInput
    sorting: AkashaBeamStreamSortingInput
  ): AkashaBeamStreamConnection
  akashaBeamStreamListCount(filters: AkashaBeamStreamFiltersInput): Int!
  akashaBlockStorage(with: WithAkashaBlockStorageInput!): AkashaBlockStorage
  akashaBlockStorageList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaBlockStorageFiltersInput
    sorting: AkashaBlockStorageSortingInput
  ): AkashaBlockStorageConnection
  akashaBlockStorageListCount(filters: AkashaBlockStorageFiltersInput): Int!
  akashaContentBlockInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockInterfaceFiltersInput
    sorting: AkashaContentBlockInterfaceSortingInput
  ): AkashaContentBlockInterfaceConnection
  akashaContentBlockInterfaceListCount(filters: AkashaContentBlockInterfaceFiltersInput): Int!
  akashaContentBlockList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockFiltersInput
    sorting: AkashaContentBlockSortingInput
  ): AkashaContentBlockConnection
  akashaContentBlockListCount(filters: AkashaContentBlockFiltersInput): Int!
  akashaContentBlockStream(with: WithAkashaContentBlockStreamInput!): AkashaContentBlockStream
  akashaContentBlockStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaContentBlockStreamFiltersInput
    sorting: AkashaContentBlockStreamSortingInput
  ): AkashaContentBlockStreamConnection
  akashaContentBlockStreamListCount(filters: AkashaContentBlockStreamFiltersInput): Int!
  akashaFollow(with: WithAkashaFollowInput!): AkashaFollow
  akashaFollowInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaFollowInterfaceFiltersInput
    sorting: AkashaFollowInterfaceSortingInput
  ): AkashaFollowInterfaceConnection
  akashaFollowInterfaceListCount(filters: AkashaFollowInterfaceFiltersInput): Int!
  akashaFollowList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaFollowFiltersInput
    sorting: AkashaFollowSortingInput
  ): AkashaFollowConnection
  akashaFollowListCount(filters: AkashaFollowFiltersInput): Int!
  akashaIndexStreamInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaIndexStreamInterfaceFiltersInput
    sorting: AkashaIndexStreamInterfaceSortingInput
  ): AkashaIndexStreamInterfaceConnection
  akashaIndexStreamInterfaceListCount(filters: AkashaIndexStreamInterfaceFiltersInput): Int!
  akashaIndexedStream(with: WithAkashaIndexedStreamInput!): AkashaIndexedStream
  akashaIndexedStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaIndexedStreamFiltersInput
    sorting: AkashaIndexedStreamSortingInput
  ): AkashaIndexedStreamConnection
  akashaIndexedStreamListCount(filters: AkashaIndexedStreamFiltersInput): Int!
  akashaInterestsStream(with: WithAkashaInterestsStreamInput!): AkashaInterestsStream
  akashaInterestsStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaInterestsStreamFiltersInput
    sorting: AkashaInterestsStreamSortingInput
  ): AkashaInterestsStreamConnection
  akashaInterestsStreamListCount(filters: AkashaInterestsStreamFiltersInput): Int!
  akashaProfile: AkashaProfile
  akashaProfileInterests: AkashaProfileInterests
  akashaProfileInterestsInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AkashaProfileInterestsInterfaceConnection
  akashaProfileInterestsInterfaceListCount: Int!
  akashaProfileInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaProfileInterfaceFiltersInput
    sorting: AkashaProfileInterfaceSortingInput
  ): AkashaProfileInterfaceConnection
  akashaProfileInterfaceListCount(filters: AkashaProfileInterfaceFiltersInput): Int!
  akashaProfileStream(with: WithAkashaProfileStreamInput!): AkashaProfileStream
  akashaProfileStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaProfileStreamFiltersInput
    sorting: AkashaProfileStreamSortingInput
  ): AkashaProfileStreamConnection
  akashaProfileStreamListCount(filters: AkashaProfileStreamFiltersInput): Int!
  akashaReflectInterfaceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectInterfaceFiltersInput
    sorting: AkashaReflectInterfaceSortingInput
  ): AkashaReflectInterfaceConnection
  akashaReflectInterfaceListCount(filters: AkashaReflectInterfaceFiltersInput): Int!
  akashaReflectList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectFiltersInput
    sorting: AkashaReflectSortingInput
  ): AkashaReflectConnection
  akashaReflectListCount(filters: AkashaReflectFiltersInput): Int!
  akashaReflectStream(with: WithAkashaReflectStreamInput!): AkashaReflectStream
  akashaReflectStreamList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AkashaReflectStreamFiltersInput
    sorting: AkashaReflectStreamSortingInput
  ): AkashaReflectStreamConnection
  akashaReflectStreamListCount(filters: AkashaReflectStreamFiltersInput): Int!
}

type AkashaApp implements Node & AkashaAppInterface {
  id: ID!
  meta: [AppProviderValue]
  name: String!
  nsfw: Boolean
  links: [AppLinkSource]
  gallery: [AppImageSource]
  license: String!
  keywords: [String]
  createdAt: DateTime!
  logoImage: AppImageSource
  coverImage: AppImageSource
  description: String!
  displayName: String!
  contributors: [CeramicAccount]
  applicationType: AkashaAppApplicationType

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  releases(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: AkashaAppReleaseInterfaceFiltersInput
    sorting: AkashaAppReleaseInterfaceSortingInput
  ): AkashaAppReleaseInterfaceConnection!
  releasesCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: AkashaAppReleaseInterfaceFiltersInput
  ): Int!
}

interface AkashaAppInterface implements Node {
  id: ID!
  meta: [AppProviderValue]
  name: String!
  nsfw: Boolean
  links: [AppLinkSource]
  gallery: [AppImageSource]
  license: String!
  keywords: [String]
  createdAt: DateTime!
  logoImage: AppImageSource
  coverImage: AppImageSource
  description: String!
  displayName: String!
  contributors: [CeramicAccount]

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

type AppProviderValue {
  value: String!
  property: String!
  provider: String!
}

type AppLinkSource {
  href: URI!
  label: String
}

"""
A field whose value conforms to the standard Uniform Resource Identifier (URI) format as specified in RFC3986.
"""
scalar URI @specifiedBy(url: "https://www.ietf.org/rfc/rfc3986.txt")

type AppImageSource {
  src: URI!
  width: Int
  height: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

enum AkashaAppApplicationType {
  APP
  PLUGIN
  WIDGET
  OTHER
}

"""A connection to a list of items."""
type AkashaAppReleaseInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaAppReleaseInterfaceEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type AkashaAppReleaseInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaAppReleaseInterface

  """A cursor for use in pagination"""
  cursor: String!
}

interface AkashaAppReleaseInterface implements Node {
  id: ID!
  meta: [AppProviderValue]
  source: URI!
  version: String!
  createdAt: DateTime!
  applicationID: CeramicStreamID!
  application: AkashaAppInterface
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

input AkashaAppReleaseInterfaceFiltersInput {
  where: AkashaAppReleaseInterfaceObjectFilterInput
  and: [AkashaAppReleaseInterfaceFiltersInput!]
  or: [AkashaAppReleaseInterfaceFiltersInput!]
  not: AkashaAppReleaseInterfaceFiltersInput
}

input AkashaAppReleaseInterfaceObjectFilterInput {
  source: StringValueFilterInput
  version: StringValueFilterInput
  createdAt: StringValueFilterInput
  applicationID: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input AkashaAppReleaseInterfaceSortingInput {
  source: SortOrder
  version: SortOrder
  createdAt: SortOrder
  applicationID: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

input WithAkashaAppInput {
  name: String!
}

"""A connection to a list of items."""
type AkashaAppInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaAppInterfaceEdge]
}

"""An edge in a connection."""
type AkashaAppInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaAppInterface

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaAppInterfaceFiltersInput {
  where: AkashaAppInterfaceObjectFilterInput
  and: [AkashaAppInterfaceFiltersInput!]
  or: [AkashaAppInterfaceFiltersInput!]
  not: AkashaAppInterfaceFiltersInput
}

input AkashaAppInterfaceObjectFilterInput {
  name: StringValueFilterInput
  nsfw: BooleanValueFilterInput
  license: StringValueFilterInput
  createdAt: StringValueFilterInput
  description: StringValueFilterInput
  displayName: StringValueFilterInput
}

input BooleanValueFilterInput {
  isNull: Boolean
  equalTo: Boolean
}

input AkashaAppInterfaceSortingInput {
  name: SortOrder
  nsfw: SortOrder
  license: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
}

"""A connection to a list of items."""
type AkashaAppConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaAppEdge]
}

"""An edge in a connection."""
type AkashaAppEdge {
  """The item at the end of the edge"""
  node: AkashaApp

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaAppFiltersInput {
  where: AkashaAppObjectFilterInput
  and: [AkashaAppFiltersInput!]
  or: [AkashaAppFiltersInput!]
  not: AkashaAppFiltersInput
}

input AkashaAppObjectFilterInput {
  name: StringValueFilterInput
  nsfw: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  displayName: StringValueFilterInput
  applicationType: AkashaAppApplicationTypeValueFilterInput
}

input AkashaAppApplicationTypeValueFilterInput {
  isNull: Boolean
  equalTo: AkashaAppApplicationType
  notEqualTo: AkashaAppApplicationType
  in: [AkashaAppApplicationType!]
  notIn: [AkashaAppApplicationType!]
}

input AkashaAppSortingInput {
  name: SortOrder
  nsfw: SortOrder
  createdAt: SortOrder
  displayName: SortOrder
  applicationType: SortOrder
}

type AkashaAppRelease implements Node & AkashaAppReleaseInterface {
  id: ID!
  meta: [AppProviderValue]
  source: URI!
  version: String!
  createdAt: DateTime!
  applicationID: CeramicStreamID!
  application: AkashaAppInterface
}

input WithAkashaAppReleaseInput {
  applicationID: CeramicStreamID!
  version: String!
}

"""A connection to a list of items."""
type AkashaAppReleaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaAppReleaseEdge]
}

"""An edge in a connection."""
type AkashaAppReleaseEdge {
  """The item at the end of the edge"""
  node: AkashaAppRelease

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaAppReleaseFiltersInput {
  where: AkashaAppReleaseObjectFilterInput
  and: [AkashaAppReleaseFiltersInput!]
  or: [AkashaAppReleaseFiltersInput!]
  not: AkashaAppReleaseFiltersInput
}

input AkashaAppReleaseObjectFilterInput {
  version: StringValueFilterInput
  createdAt: StringValueFilterInput
  applicationID: StringValueFilterInput
}

input AkashaAppReleaseSortingInput {
  version: SortOrder
  createdAt: SortOrder
  applicationID: SortOrder
}

type AkashaAppsStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  active: Boolean!
  status: AkashaAppsStreamModerationStatus
  createdAt: DateTime!
  moderationID: CeramicStreamID
  applicationID: CeramicStreamID!
  moderation: Node
  application: AkashaAppInterface
}

interface AkashaIndexStreamInterface implements Node {
  id: ID!
  active: Boolean!
  createdAt: DateTime!
  moderationID: CeramicStreamID
  moderation: Node
}

enum AkashaAppsStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaAppsStreamInput {
  applicationID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaAppsStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaAppsStreamEdge]
}

"""An edge in a connection."""
type AkashaAppsStreamEdge {
  """The item at the end of the edge"""
  node: AkashaAppsStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaAppsStreamFiltersInput {
  where: AkashaAppsStreamObjectFilterInput
  and: [AkashaAppsStreamFiltersInput!]
  or: [AkashaAppsStreamFiltersInput!]
  not: AkashaAppsStreamFiltersInput
}

input AkashaAppsStreamObjectFilterInput {
  active: BooleanValueFilterInput
  status: AkashaAppsStreamModerationStatusValueFilterInput
  createdAt: StringValueFilterInput
  moderationID: StringValueFilterInput
  applicationID: StringValueFilterInput
}

input AkashaAppsStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaAppsStreamModerationStatus
  notEqualTo: AkashaAppsStreamModerationStatus
  in: [AkashaAppsStreamModerationStatus!]
  notIn: [AkashaAppsStreamModerationStatus!]
}

input AkashaAppsStreamSortingInput {
  active: SortOrder
  status: SortOrder
  createdAt: SortOrder
  moderationID: SortOrder
  applicationID: SortOrder
}

"""A connection to a list of items."""
type AkashaBeamInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaBeamInterfaceEdge]
}

"""An edge in a connection."""
type AkashaBeamInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaBeamInterface

  """A cursor for use in pagination"""
  cursor: String!
}

interface AkashaBeamInterface implements Node {
  id: ID!
  nsfw: Boolean
  tags: [BeamLabeled]
  appID: CeramicStreamID!
  active: Boolean!
  content: [BeamBlockRecord!]!
  mentions: [CeramicAccount]
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
  embeddedStream: BeamEmbeddedType
  app: AkashaAppInterface

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  appVersion: AkashaAppReleaseInterface
}

type BeamLabeled {
  value: String!
  labelType: String!
}

type BeamBlockRecord {
  order: Int!
  blockID: CeramicStreamID!
}

type BeamEmbeddedType {
  label: String!
  embeddedID: CeramicStreamID!
}

input AkashaBeamInterfaceFiltersInput {
  where: AkashaBeamInterfaceObjectFilterInput
  and: [AkashaBeamInterfaceFiltersInput!]
  or: [AkashaBeamInterfaceFiltersInput!]
  not: AkashaBeamInterfaceFiltersInput
}

input AkashaBeamInterfaceObjectFilterInput {
  nsfw: BooleanValueFilterInput
  appID: StringValueFilterInput
  active: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaBeamInterfaceSortingInput {
  nsfw: SortOrder
  appID: SortOrder
  active: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

"""A connection to a list of items."""
type AkashaBeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaBeamEdge]
}

"""An edge in a connection."""
type AkashaBeamEdge {
  """The item at the end of the edge"""
  node: AkashaBeam

  """A cursor for use in pagination"""
  cursor: String!
}

type AkashaBeam implements Node & AkashaBeamInterface {
  id: ID!
  nsfw: Boolean
  tags: [BeamLabeled]
  appID: CeramicStreamID!
  active: Boolean!
  content: [BeamBlockRecord!]!
  mentions: [CeramicAccount]
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
  embeddedStream: BeamEmbeddedType
  app: AkashaAppInterface

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  appVersion: AkashaAppReleaseInterface
  reflections(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: AkashaReflectInterfaceFiltersInput
    sorting: AkashaReflectInterfaceSortingInput
  ): AkashaReflectInterfaceConnection!
  reflectionsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: AkashaReflectInterfaceFiltersInput
  ): Int!
}

"""A connection to a list of items."""
type AkashaReflectInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaReflectInterfaceEdge]
}

"""An edge in a connection."""
type AkashaReflectInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaReflectInterface

  """A cursor for use in pagination"""
  cursor: String!
}

interface AkashaReflectInterface implements Node {
  id: ID!
  nsfw: Boolean
  tags: [String]
  active: Boolean!
  beamID: CeramicStreamID!
  content: [ReflectProviderValue!]!
  isReply: Boolean
  mentions: [CeramicStreamID]
  createdAt: DateTime!
  reflection: CeramicStreamID
  beam: AkashaBeamInterface

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  reflectionView: Node
}

type ReflectProviderValue {
  label: String!
  value: String!
  propertyType: String!
}

input AkashaReflectInterfaceFiltersInput {
  where: AkashaReflectInterfaceObjectFilterInput
  and: [AkashaReflectInterfaceFiltersInput!]
  or: [AkashaReflectInterfaceFiltersInput!]
  not: AkashaReflectInterfaceFiltersInput
}

input AkashaReflectInterfaceObjectFilterInput {
  nsfw: BooleanValueFilterInput
  active: BooleanValueFilterInput
  beamID: StringValueFilterInput
  isReply: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  reflection: StringValueFilterInput
}

input AkashaReflectInterfaceSortingInput {
  nsfw: SortOrder
  active: SortOrder
  beamID: SortOrder
  isReply: SortOrder
  createdAt: SortOrder
  reflection: SortOrder
}

input AkashaBeamFiltersInput {
  where: AkashaBeamObjectFilterInput
  and: [AkashaBeamFiltersInput!]
  or: [AkashaBeamFiltersInput!]
  not: AkashaBeamFiltersInput
}

input AkashaBeamObjectFilterInput {
  nsfw: BooleanValueFilterInput
  appID: StringValueFilterInput
  active: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaBeamSortingInput {
  nsfw: SortOrder
  appID: SortOrder
  active: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

type AkashaBeamStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  appID: CeramicStreamID
  active: Boolean!
  beamID: CeramicStreamID!
  status: AkashaBeamStreamModerationStatus
  createdAt: DateTime!
  moderationID: CeramicStreamID
  beam: AkashaBeamInterface
  moderation: Node
}

enum AkashaBeamStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaBeamStreamInput {
  beamID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaBeamStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaBeamStreamEdge]
}

"""An edge in a connection."""
type AkashaBeamStreamEdge {
  """The item at the end of the edge"""
  node: AkashaBeamStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaBeamStreamFiltersInput {
  where: AkashaBeamStreamObjectFilterInput
  and: [AkashaBeamStreamFiltersInput!]
  or: [AkashaBeamStreamFiltersInput!]
  not: AkashaBeamStreamFiltersInput
}

input AkashaBeamStreamObjectFilterInput {
  appID: StringValueFilterInput
  active: BooleanValueFilterInput
  beamID: StringValueFilterInput
  status: AkashaBeamStreamModerationStatusValueFilterInput
  createdAt: StringValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaBeamStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaBeamStreamModerationStatus
  notEqualTo: AkashaBeamStreamModerationStatus
  in: [AkashaBeamStreamModerationStatus!]
  notIn: [AkashaBeamStreamModerationStatus!]
}

input AkashaBeamStreamSortingInput {
  appID: SortOrder
  active: SortOrder
  beamID: SortOrder
  status: SortOrder
  createdAt: SortOrder
  moderationID: SortOrder
}

type AkashaBlockStorage implements Node & AkashaContentBlockInterface {
  id: ID!
  kind: AkashaBlockStorageBlockDef
  nsfw: Boolean
  active: Boolean!
  blockID: CeramicStreamID!
  content: [BlockLabeledValue!]!
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
  block: AkashaContentBlock

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  appVersion: AkashaAppReleaseInterface
}

interface AkashaContentBlockInterface implements Node {
  id: ID!
  nsfw: Boolean
  active: Boolean!
  content: [BlockLabeledValue!]!
  createdAt: DateTime!
  appVersionID: CeramicStreamID!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  appVersion: AkashaAppReleaseInterface
}

type BlockLabeledValue {
  label: String!
  value: String!
  propertyType: String!
}

enum AkashaBlockStorageBlockDef {
  TEXT
  RTF
  FORM
  IMAGE
  ANIMATED_IMAGE
  VIDEO
  BOOL
  EMOJI
  FORM_DATA
  OTHER
}

type AkashaContentBlock implements Node & AkashaContentBlockInterface {
  id: ID!
  kind: AkashaContentBlockBlockDef
  nsfw: Boolean
  active: Boolean!
  content: [BlockLabeledValue!]!
  createdAt: DateTime!
  appVersionID: CeramicStreamID!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  appVersion: AkashaAppReleaseInterface
}

enum AkashaContentBlockBlockDef {
  TEXT
  RTF
  FORM
  IMAGE
  ANIMATED_IMAGE
  VIDEO
  BOOL
  EMOJI
  FORM_DATA
  OTHER
}

input WithAkashaBlockStorageInput {
  blockID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaBlockStorageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaBlockStorageEdge]
}

"""An edge in a connection."""
type AkashaBlockStorageEdge {
  """The item at the end of the edge"""
  node: AkashaBlockStorage

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaBlockStorageFiltersInput {
  where: AkashaBlockStorageObjectFilterInput
  and: [AkashaBlockStorageFiltersInput!]
  or: [AkashaBlockStorageFiltersInput!]
  not: AkashaBlockStorageFiltersInput
}

input AkashaBlockStorageObjectFilterInput {
  kind: AkashaBlockStorageBlockDefValueFilterInput
  nsfw: BooleanValueFilterInput
  active: BooleanValueFilterInput
  blockID: StringValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaBlockStorageBlockDefValueFilterInput {
  isNull: Boolean
  equalTo: AkashaBlockStorageBlockDef
  notEqualTo: AkashaBlockStorageBlockDef
  in: [AkashaBlockStorageBlockDef!]
  notIn: [AkashaBlockStorageBlockDef!]
}

input AkashaBlockStorageSortingInput {
  kind: SortOrder
  nsfw: SortOrder
  active: SortOrder
  blockID: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

"""A connection to a list of items."""
type AkashaContentBlockInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaContentBlockInterfaceEdge]
}

"""An edge in a connection."""
type AkashaContentBlockInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaContentBlockInterface

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaContentBlockInterfaceFiltersInput {
  where: AkashaContentBlockInterfaceObjectFilterInput
  and: [AkashaContentBlockInterfaceFiltersInput!]
  or: [AkashaContentBlockInterfaceFiltersInput!]
  not: AkashaContentBlockInterfaceFiltersInput
}

input AkashaContentBlockInterfaceObjectFilterInput {
  nsfw: BooleanValueFilterInput
  active: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaContentBlockInterfaceSortingInput {
  nsfw: SortOrder
  active: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

"""A connection to a list of items."""
type AkashaContentBlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaContentBlockEdge]
}

"""An edge in a connection."""
type AkashaContentBlockEdge {
  """The item at the end of the edge"""
  node: AkashaContentBlock

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaContentBlockFiltersInput {
  where: AkashaContentBlockObjectFilterInput
  and: [AkashaContentBlockFiltersInput!]
  or: [AkashaContentBlockFiltersInput!]
  not: AkashaContentBlockFiltersInput
}

input AkashaContentBlockObjectFilterInput {
  kind: AkashaContentBlockBlockDefValueFilterInput
  nsfw: BooleanValueFilterInput
  active: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaContentBlockBlockDefValueFilterInput {
  isNull: Boolean
  equalTo: AkashaContentBlockBlockDef
  notEqualTo: AkashaContentBlockBlockDef
  in: [AkashaContentBlockBlockDef!]
  notIn: [AkashaContentBlockBlockDef!]
}

input AkashaContentBlockSortingInput {
  kind: SortOrder
  nsfw: SortOrder
  active: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

type AkashaContentBlockStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  active: Boolean!
  status: AkashaContentBlockStreamModerationStatus
  blockID: CeramicStreamID!
  createdAt: DateTime!
  moderationID: CeramicStreamID
  block: AkashaContentBlockInterface
  moderation: Node
}

enum AkashaContentBlockStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaContentBlockStreamInput {
  blockID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaContentBlockStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaContentBlockStreamEdge]
}

"""An edge in a connection."""
type AkashaContentBlockStreamEdge {
  """The item at the end of the edge"""
  node: AkashaContentBlockStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaContentBlockStreamFiltersInput {
  where: AkashaContentBlockStreamObjectFilterInput
  and: [AkashaContentBlockStreamFiltersInput!]
  or: [AkashaContentBlockStreamFiltersInput!]
  not: AkashaContentBlockStreamFiltersInput
}

input AkashaContentBlockStreamObjectFilterInput {
  active: BooleanValueFilterInput
  status: AkashaContentBlockStreamModerationStatusValueFilterInput
  blockID: StringValueFilterInput
  createdAt: StringValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaContentBlockStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaContentBlockStreamModerationStatus
  notEqualTo: AkashaContentBlockStreamModerationStatus
  in: [AkashaContentBlockStreamModerationStatus!]
  notIn: [AkashaContentBlockStreamModerationStatus!]
}

input AkashaContentBlockStreamSortingInput {
  active: SortOrder
  status: SortOrder
  blockID: SortOrder
  createdAt: SortOrder
  moderationID: SortOrder
}

type AkashaFollow implements Node & AkashaFollowInterface {
  id: ID!
  profileID: CeramicStreamID!
  isFollowing: Boolean!

  """Account controlling the document"""
  did: CeramicAccount!
  profile: AkashaProfileInterface
}

interface AkashaFollowInterface implements Node {
  id: ID!
  profileID: CeramicStreamID!
  isFollowing: Boolean!

  """Account controlling the document"""
  did: CeramicAccount!
  profile: AkashaProfileInterface
}

interface AkashaProfileInterface implements Node {
  id: ID!
  name: String!
  nsfw: Boolean
  appID: CeramicStreamID!
  links: [ProfileLinkSource]
  avatar: ProfileImageVersions
  createdAt: DateTime!
  background: ProfileImageVersions
  description: String
  appVersionID: CeramicStreamID!
  app: AkashaAppInterface

  """Account controlling the document"""
  did: CeramicAccount!
  appVersion: AkashaAppReleaseInterface
}

type ProfileLinkSource {
  href: URI!
  label: String
}

type ProfileImageVersions {
  default: ProfileImageSource!
  alternatives: [ProfileImageSource]
}

type ProfileImageSource {
  src: URI!
  width: Int!
  height: Int!
}

input WithAkashaFollowInput {
  profileID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaFollowInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaFollowInterfaceEdge]
}

"""An edge in a connection."""
type AkashaFollowInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaFollowInterface

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaFollowInterfaceFiltersInput {
  where: AkashaFollowInterfaceObjectFilterInput
  and: [AkashaFollowInterfaceFiltersInput!]
  or: [AkashaFollowInterfaceFiltersInput!]
  not: AkashaFollowInterfaceFiltersInput
}

input AkashaFollowInterfaceObjectFilterInput {
  profileID: StringValueFilterInput
  isFollowing: BooleanValueFilterInput
}

input AkashaFollowInterfaceSortingInput {
  profileID: SortOrder
  isFollowing: SortOrder
}

"""A connection to a list of items."""
type AkashaFollowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaFollowEdge]
}

"""An edge in a connection."""
type AkashaFollowEdge {
  """The item at the end of the edge"""
  node: AkashaFollow

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaFollowFiltersInput {
  where: AkashaFollowObjectFilterInput
  and: [AkashaFollowFiltersInput!]
  or: [AkashaFollowFiltersInput!]
  not: AkashaFollowFiltersInput
}

input AkashaFollowObjectFilterInput {
  profileID: StringValueFilterInput
  isFollowing: BooleanValueFilterInput
}

input AkashaFollowSortingInput {
  profileID: SortOrder
  isFollowing: SortOrder
}

"""A connection to a list of items."""
type AkashaIndexStreamInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaIndexStreamInterfaceEdge]
}

"""An edge in a connection."""
type AkashaIndexStreamInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaIndexStreamInterface

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaIndexStreamInterfaceFiltersInput {
  where: AkashaIndexStreamInterfaceObjectFilterInput
  and: [AkashaIndexStreamInterfaceFiltersInput!]
  or: [AkashaIndexStreamInterfaceFiltersInput!]
  not: AkashaIndexStreamInterfaceFiltersInput
}

input AkashaIndexStreamInterfaceObjectFilterInput {
  active: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaIndexStreamInterfaceSortingInput {
  active: SortOrder
  createdAt: SortOrder
  moderationID: SortOrder
}

type AkashaIndexedStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  active: Boolean!
  status: AkashaIndexedStreamModerationStatus
  stream: CeramicStreamID!
  createdAt: DateTime!
  indexType: String!
  indexValue: String!
  streamType: AkashaIndexedStreamStreamType
  moderationID: CeramicStreamID
  moderation: Node
  streamView: Node
}

enum AkashaIndexedStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

enum AkashaIndexedStreamStreamType {
  BEAM
  REFLECT
  PROFILE
  APP
  EXTENSION
  PLUGIN
  WIDGET
  OTHER
}

input WithAkashaIndexedStreamInput {
  stream: CeramicStreamID!
  indexType: String!
  indexValue: String!
}

"""A connection to a list of items."""
type AkashaIndexedStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaIndexedStreamEdge]
}

"""An edge in a connection."""
type AkashaIndexedStreamEdge {
  """The item at the end of the edge"""
  node: AkashaIndexedStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaIndexedStreamFiltersInput {
  where: AkashaIndexedStreamObjectFilterInput
  and: [AkashaIndexedStreamFiltersInput!]
  or: [AkashaIndexedStreamFiltersInput!]
  not: AkashaIndexedStreamFiltersInput
}

input AkashaIndexedStreamObjectFilterInput {
  active: BooleanValueFilterInput
  status: AkashaIndexedStreamModerationStatusValueFilterInput
  stream: StringValueFilterInput
  createdAt: StringValueFilterInput
  indexType: StringValueFilterInput
  indexValue: StringValueFilterInput
  streamType: AkashaIndexedStreamStreamTypeValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaIndexedStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaIndexedStreamModerationStatus
  notEqualTo: AkashaIndexedStreamModerationStatus
  in: [AkashaIndexedStreamModerationStatus!]
  notIn: [AkashaIndexedStreamModerationStatus!]
}

input AkashaIndexedStreamStreamTypeValueFilterInput {
  isNull: Boolean
  equalTo: AkashaIndexedStreamStreamType
  notEqualTo: AkashaIndexedStreamStreamType
  in: [AkashaIndexedStreamStreamType!]
  notIn: [AkashaIndexedStreamStreamType!]
}

input AkashaIndexedStreamSortingInput {
  active: SortOrder
  status: SortOrder
  stream: SortOrder
  createdAt: SortOrder
  indexType: SortOrder
  indexValue: SortOrder
  streamType: SortOrder
  moderationID: SortOrder
}

type AkashaInterestsStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  value: String!
  active: Boolean!
  status: AkashaInterestsStreamModerationStatus
  createdAt: DateTime!
  labelType: String!
  moderationID: CeramicStreamID
  moderation: Node
}

enum AkashaInterestsStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaInterestsStreamInput {
  labelType: String!
  value: String!
}

"""A connection to a list of items."""
type AkashaInterestsStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaInterestsStreamEdge]
}

"""An edge in a connection."""
type AkashaInterestsStreamEdge {
  """The item at the end of the edge"""
  node: AkashaInterestsStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaInterestsStreamFiltersInput {
  where: AkashaInterestsStreamObjectFilterInput
  and: [AkashaInterestsStreamFiltersInput!]
  or: [AkashaInterestsStreamFiltersInput!]
  not: AkashaInterestsStreamFiltersInput
}

input AkashaInterestsStreamObjectFilterInput {
  value: StringValueFilterInput
  active: BooleanValueFilterInput
  status: AkashaInterestsStreamModerationStatusValueFilterInput
  createdAt: StringValueFilterInput
  labelType: StringValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaInterestsStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaInterestsStreamModerationStatus
  notEqualTo: AkashaInterestsStreamModerationStatus
  in: [AkashaInterestsStreamModerationStatus!]
  notIn: [AkashaInterestsStreamModerationStatus!]
}

input AkashaInterestsStreamSortingInput {
  value: SortOrder
  active: SortOrder
  status: SortOrder
  createdAt: SortOrder
  labelType: SortOrder
  moderationID: SortOrder
}

type AkashaProfile implements Node & AkashaProfileInterface {
  id: ID!
  name: String!
  nsfw: Boolean
  appID: CeramicStreamID!
  links: [ProfileLinkSource]
  avatar: ProfileImageVersions
  createdAt: DateTime!
  background: ProfileImageVersions
  description: String
  appVersionID: CeramicStreamID!
  app: AkashaAppInterface

  """Account controlling the document"""
  did: CeramicAccount!
  appVersion: AkashaAppReleaseInterface
  followers(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: AkashaFollowInterfaceFiltersInput
    sorting: AkashaFollowInterfaceSortingInput
  ): AkashaFollowInterfaceConnection!
  followersCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: AkashaFollowInterfaceFiltersInput
  ): Int!
}

type AkashaProfileInterests implements Node & AkashaProfileInterestsInterface {
  id: ID!
  topics: [ProfileLabeled!]!

  """Account controlling the document"""
  did: CeramicAccount!
}

interface AkashaProfileInterestsInterface implements Node {
  id: ID!
  topics: [ProfileLabeled!]!

  """Account controlling the document"""
  did: CeramicAccount!
}

type ProfileLabeled {
  value: String!
  labelType: String!
}

"""A connection to a list of items."""
type AkashaProfileInterestsInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaProfileInterestsInterfaceEdge]
}

"""An edge in a connection."""
type AkashaProfileInterestsInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaProfileInterestsInterface

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type AkashaProfileInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaProfileInterfaceEdge]
}

"""An edge in a connection."""
type AkashaProfileInterfaceEdge {
  """The item at the end of the edge"""
  node: AkashaProfileInterface

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaProfileInterfaceFiltersInput {
  where: AkashaProfileInterfaceObjectFilterInput
  and: [AkashaProfileInterfaceFiltersInput!]
  or: [AkashaProfileInterfaceFiltersInput!]
  not: AkashaProfileInterfaceFiltersInput
}

input AkashaProfileInterfaceObjectFilterInput {
  name: StringValueFilterInput
  nsfw: BooleanValueFilterInput
  appID: StringValueFilterInput
  createdAt: StringValueFilterInput
  description: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaProfileInterfaceSortingInput {
  name: SortOrder
  nsfw: SortOrder
  appID: SortOrder
  createdAt: SortOrder
  description: SortOrder
  appVersionID: SortOrder
}

type AkashaProfileStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  appID: CeramicStreamID
  active: Boolean!
  status: AkashaProfileStreamModerationStatus
  createdAt: DateTime!
  profileID: CeramicStreamID!
  moderationID: CeramicStreamID
  profile: AkashaProfileInterface
  moderation: Node
}

enum AkashaProfileStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaProfileStreamInput {
  profileID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaProfileStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaProfileStreamEdge]
}

"""An edge in a connection."""
type AkashaProfileStreamEdge {
  """The item at the end of the edge"""
  node: AkashaProfileStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaProfileStreamFiltersInput {
  where: AkashaProfileStreamObjectFilterInput
  and: [AkashaProfileStreamFiltersInput!]
  or: [AkashaProfileStreamFiltersInput!]
  not: AkashaProfileStreamFiltersInput
}

input AkashaProfileStreamObjectFilterInput {
  appID: StringValueFilterInput
  active: BooleanValueFilterInput
  status: AkashaProfileStreamModerationStatusValueFilterInput
  createdAt: StringValueFilterInput
  profileID: StringValueFilterInput
  moderationID: StringValueFilterInput
}

input AkashaProfileStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaProfileStreamModerationStatus
  notEqualTo: AkashaProfileStreamModerationStatus
  in: [AkashaProfileStreamModerationStatus!]
  notIn: [AkashaProfileStreamModerationStatus!]
}

input AkashaProfileStreamSortingInput {
  appID: SortOrder
  active: SortOrder
  status: SortOrder
  createdAt: SortOrder
  profileID: SortOrder
  moderationID: SortOrder
}

"""A connection to a list of items."""
type AkashaReflectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaReflectEdge]
}

"""An edge in a connection."""
type AkashaReflectEdge {
  """The item at the end of the edge"""
  node: AkashaReflect

  """A cursor for use in pagination"""
  cursor: String!
}

type AkashaReflect implements Node & AkashaReflectInterface {
  id: ID!
  nsfw: Boolean
  tags: [String]
  active: Boolean!
  beamID: CeramicStreamID!
  content: [ReflectProviderValue!]!
  isReply: Boolean
  mentions: [CeramicStreamID]
  createdAt: DateTime!
  reflection: CeramicStreamID
  beam: AkashaBeamInterface

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  reflectionView: Node
}

input AkashaReflectFiltersInput {
  where: AkashaReflectObjectFilterInput
  and: [AkashaReflectFiltersInput!]
  or: [AkashaReflectFiltersInput!]
  not: AkashaReflectFiltersInput
}

input AkashaReflectObjectFilterInput {
  nsfw: BooleanValueFilterInput
  active: BooleanValueFilterInput
  beamID: StringValueFilterInput
  isReply: BooleanValueFilterInput
  createdAt: StringValueFilterInput
  reflection: StringValueFilterInput
}

input AkashaReflectSortingInput {
  nsfw: SortOrder
  active: SortOrder
  beamID: SortOrder
  isReply: SortOrder
  createdAt: SortOrder
  reflection: SortOrder
}

type AkashaReflectStream implements Node & AkashaIndexStreamInterface {
  id: ID!
  active: Boolean!
  beamID: CeramicStreamID!
  status: AkashaReflectStreamModerationStatus
  isReply: Boolean
  replyTo: CeramicStreamID
  createdAt: DateTime!
  moderationID: CeramicStreamID
  reflectionID: CeramicStreamID!
  moderation: Node
  reflection: AkashaReflectInterface
}

enum AkashaReflectStreamModerationStatus {
  REMOVED
  IN_REVIEW
  SUSPENDED
  NSFW
  OK
  OTHER
}

input WithAkashaReflectStreamInput {
  reflectionID: CeramicStreamID!
}

"""A connection to a list of items."""
type AkashaReflectStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaReflectStreamEdge]
}

"""An edge in a connection."""
type AkashaReflectStreamEdge {
  """The item at the end of the edge"""
  node: AkashaReflectStream

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaReflectStreamFiltersInput {
  where: AkashaReflectStreamObjectFilterInput
  and: [AkashaReflectStreamFiltersInput!]
  or: [AkashaReflectStreamFiltersInput!]
  not: AkashaReflectStreamFiltersInput
}

input AkashaReflectStreamObjectFilterInput {
  active: BooleanValueFilterInput
  beamID: StringValueFilterInput
  status: AkashaReflectStreamModerationStatusValueFilterInput
  isReply: BooleanValueFilterInput
  replyTo: StringValueFilterInput
  createdAt: StringValueFilterInput
  moderationID: StringValueFilterInput
  reflectionID: StringValueFilterInput
}

input AkashaReflectStreamModerationStatusValueFilterInput {
  isNull: Boolean
  equalTo: AkashaReflectStreamModerationStatus
  notEqualTo: AkashaReflectStreamModerationStatus
  in: [AkashaReflectStreamModerationStatus!]
  notIn: [AkashaReflectStreamModerationStatus!]
}

input AkashaReflectStreamSortingInput {
  active: SortOrder
  beamID: SortOrder
  status: SortOrder
  isReply: SortOrder
  replyTo: SortOrder
  createdAt: SortOrder
  moderationID: SortOrder
  reflectionID: SortOrder
}

"""A connection to a list of items."""
type AkashaProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaProfileEdge]
}

"""An edge in a connection."""
type AkashaProfileEdge {
  """The item at the end of the edge"""
  node: AkashaProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input AkashaProfileFiltersInput {
  where: AkashaProfileObjectFilterInput
  and: [AkashaProfileFiltersInput!]
  or: [AkashaProfileFiltersInput!]
  not: AkashaProfileFiltersInput
}

input AkashaProfileObjectFilterInput {
  name: StringValueFilterInput
  nsfw: BooleanValueFilterInput
  appID: StringValueFilterInput
  createdAt: StringValueFilterInput
  appVersionID: StringValueFilterInput
}

input AkashaProfileSortingInput {
  name: SortOrder
  nsfw: SortOrder
  appID: SortOrder
  createdAt: SortOrder
  appVersionID: SortOrder
}

"""A connection to a list of items."""
type AkashaProfileInterestsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AkashaProfileInterestsEdge]
}

"""An edge in a connection."""
type AkashaProfileInterestsEdge {
  """The item at the end of the edge"""
  node: AkashaProfileInterests

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  setAkashaApp(input: SetAkashaAppInput!): SetAkashaAppPayload
  updateAkashaApp(input: UpdateAkashaAppInput!): UpdateAkashaAppPayload
  enableIndexingAkashaApp(input: EnableIndexingAkashaAppInput!): EnableIndexingAkashaAppPayload
  setAkashaAppRelease(input: SetAkashaAppReleaseInput!): SetAkashaAppReleasePayload
  updateAkashaAppRelease(input: UpdateAkashaAppReleaseInput!): UpdateAkashaAppReleasePayload
  enableIndexingAkashaAppRelease(input: EnableIndexingAkashaAppReleaseInput!): EnableIndexingAkashaAppReleasePayload
  setAkashaAppsStream(input: SetAkashaAppsStreamInput!): SetAkashaAppsStreamPayload
  updateAkashaAppsStream(input: UpdateAkashaAppsStreamInput!): UpdateAkashaAppsStreamPayload
  enableIndexingAkashaAppsStream(input: EnableIndexingAkashaAppsStreamInput!): EnableIndexingAkashaAppsStreamPayload
  createAkashaBeam(input: CreateAkashaBeamInput!): CreateAkashaBeamPayload
  updateAkashaBeam(input: UpdateAkashaBeamInput!): UpdateAkashaBeamPayload
  enableIndexingAkashaBeam(input: EnableIndexingAkashaBeamInput!): EnableIndexingAkashaBeamPayload
  setAkashaBeamStream(input: SetAkashaBeamStreamInput!): SetAkashaBeamStreamPayload
  updateAkashaBeamStream(input: UpdateAkashaBeamStreamInput!): UpdateAkashaBeamStreamPayload
  enableIndexingAkashaBeamStream(input: EnableIndexingAkashaBeamStreamInput!): EnableIndexingAkashaBeamStreamPayload
  setAkashaBlockStorage(input: SetAkashaBlockStorageInput!): SetAkashaBlockStoragePayload
  updateAkashaBlockStorage(input: UpdateAkashaBlockStorageInput!): UpdateAkashaBlockStoragePayload
  enableIndexingAkashaBlockStorage(input: EnableIndexingAkashaBlockStorageInput!): EnableIndexingAkashaBlockStoragePayload
  createAkashaContentBlock(input: CreateAkashaContentBlockInput!): CreateAkashaContentBlockPayload
  updateAkashaContentBlock(input: UpdateAkashaContentBlockInput!): UpdateAkashaContentBlockPayload
  enableIndexingAkashaContentBlock(input: EnableIndexingAkashaContentBlockInput!): EnableIndexingAkashaContentBlockPayload
  setAkashaContentBlockStream(input: SetAkashaContentBlockStreamInput!): SetAkashaContentBlockStreamPayload
  updateAkashaContentBlockStream(input: UpdateAkashaContentBlockStreamInput!): UpdateAkashaContentBlockStreamPayload
  enableIndexingAkashaContentBlockStream(input: EnableIndexingAkashaContentBlockStreamInput!): EnableIndexingAkashaContentBlockStreamPayload
  setAkashaFollow(input: SetAkashaFollowInput!): SetAkashaFollowPayload
  updateAkashaFollow(input: UpdateAkashaFollowInput!): UpdateAkashaFollowPayload
  enableIndexingAkashaFollow(input: EnableIndexingAkashaFollowInput!): EnableIndexingAkashaFollowPayload
  setAkashaIndexedStream(input: SetAkashaIndexedStreamInput!): SetAkashaIndexedStreamPayload
  updateAkashaIndexedStream(input: UpdateAkashaIndexedStreamInput!): UpdateAkashaIndexedStreamPayload
  enableIndexingAkashaIndexedStream(input: EnableIndexingAkashaIndexedStreamInput!): EnableIndexingAkashaIndexedStreamPayload
  setAkashaInterestsStream(input: SetAkashaInterestsStreamInput!): SetAkashaInterestsStreamPayload
  updateAkashaInterestsStream(input: UpdateAkashaInterestsStreamInput!): UpdateAkashaInterestsStreamPayload
  enableIndexingAkashaInterestsStream(input: EnableIndexingAkashaInterestsStreamInput!): EnableIndexingAkashaInterestsStreamPayload
  setAkashaProfile(input: SetAkashaProfileInput!): SetAkashaProfilePayload
  createAkashaProfile(input: CreateAkashaProfileInput!): CreateAkashaProfilePayload @deprecated(reason: "Replaced by the setAkashaProfile mutation, createAkashaProfile will be removed in a future version of ComposeDB.")
  updateAkashaProfile(input: UpdateAkashaProfileInput!): UpdateAkashaProfilePayload
  enableIndexingAkashaProfile(input: EnableIndexingAkashaProfileInput!): EnableIndexingAkashaProfilePayload
  setAkashaProfileInterests(input: SetAkashaProfileInterestsInput!): SetAkashaProfileInterestsPayload
  createAkashaProfileInterests(input: CreateAkashaProfileInterestsInput!): CreateAkashaProfileInterestsPayload @deprecated(reason: "Replaced by the setAkashaProfileInterests mutation, createAkashaProfileInterests will be removed in a future version of ComposeDB.")
  updateAkashaProfileInterests(input: UpdateAkashaProfileInterestsInput!): UpdateAkashaProfileInterestsPayload
  enableIndexingAkashaProfileInterests(input: EnableIndexingAkashaProfileInterestsInput!): EnableIndexingAkashaProfileInterestsPayload
  setAkashaProfileStream(input: SetAkashaProfileStreamInput!): SetAkashaProfileStreamPayload
  updateAkashaProfileStream(input: UpdateAkashaProfileStreamInput!): UpdateAkashaProfileStreamPayload
  enableIndexingAkashaProfileStream(input: EnableIndexingAkashaProfileStreamInput!): EnableIndexingAkashaProfileStreamPayload
  createAkashaReflect(input: CreateAkashaReflectInput!): CreateAkashaReflectPayload
  updateAkashaReflect(input: UpdateAkashaReflectInput!): UpdateAkashaReflectPayload
  enableIndexingAkashaReflect(input: EnableIndexingAkashaReflectInput!): EnableIndexingAkashaReflectPayload
  setAkashaReflectStream(input: SetAkashaReflectStreamInput!): SetAkashaReflectStreamPayload
  updateAkashaReflectStream(input: UpdateAkashaReflectStreamInput!): UpdateAkashaReflectStreamPayload
  enableIndexingAkashaReflectStream(input: EnableIndexingAkashaReflectStreamInput!): EnableIndexingAkashaReflectStreamPayload
}

type SetAkashaAppPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaApp!
  clientMutationId: String
}

input SetAkashaAppInput {
  content: AkashaAppInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaAppInput {
  meta: [AppProviderValueInput]
  name: String!
  nsfw: Boolean
  links: [AppLinkSourceInput]
  gallery: [AppImageSourceInput]
  license: String!
  keywords: [String]
  createdAt: DateTime!
  logoImage: AppImageSourceInput
  coverImage: AppImageSourceInput
  description: String!
  displayName: String!
  contributors: [DID]
  applicationType: AkashaAppApplicationType
}

input AppProviderValueInput {
  value: String!
  property: String!
  provider: String!
}

input AppLinkSourceInput {
  href: URI!
  label: String
}

input AppImageSourceInput {
  src: URI!
  width: Int
  height: Int
}

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

input SetOptionsInput {
  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean

  """
  Maximum amount of time to lookup the stream over the network, in seconds - see https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.CreateOpts.html#syncTimeoutSeconds
  """
  syncTimeout: Int
}

type UpdateAkashaAppPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaApp!
  clientMutationId: String
}

input UpdateAkashaAppInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaAppInput!
  clientMutationId: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

input PartialAkashaAppInput {
  meta: [AppProviderValueInput]
  links: [AppLinkSourceInput]
  gallery: [AppImageSourceInput]
  logoImage: AppImageSourceInput
  coverImage: AppImageSourceInput
  description: String
  contributors: [DID]
  applicationType: AkashaAppApplicationType
}

type EnableIndexingAkashaAppPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaApp
  clientMutationId: String
}

input EnableIndexingAkashaAppInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaAppReleasePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppRelease!
  clientMutationId: String
}

input SetAkashaAppReleaseInput {
  content: AkashaAppReleaseInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaAppReleaseInput {
  meta: [AppProviderValueInput]
  source: URI!
  version: String!
  createdAt: DateTime!
  applicationID: CeramicStreamID!
}

type UpdateAkashaAppReleasePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppRelease!
  clientMutationId: String
}

input UpdateAkashaAppReleaseInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaAppReleaseInput!
  clientMutationId: String
}

input PartialAkashaAppReleaseInput {
  meta: [AppProviderValueInput]
}

type EnableIndexingAkashaAppReleasePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppRelease
  clientMutationId: String
}

input EnableIndexingAkashaAppReleaseInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaAppsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppsStream!
  clientMutationId: String
}

input SetAkashaAppsStreamInput {
  content: AkashaAppsStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaAppsStreamInput {
  active: Boolean!
  status: AkashaAppsStreamModerationStatus
  createdAt: DateTime!
  moderationID: CeramicStreamID
  applicationID: CeramicStreamID!
}

type UpdateAkashaAppsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppsStream!
  clientMutationId: String
}

input UpdateAkashaAppsStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaAppsStreamInput!
  clientMutationId: String
}

input PartialAkashaAppsStreamInput {
  active: Boolean
  status: AkashaAppsStreamModerationStatus
}

type EnableIndexingAkashaAppsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaAppsStream
  clientMutationId: String
}

input EnableIndexingAkashaAppsStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateAkashaBeamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeam!
  clientMutationId: String
}

input CreateAkashaBeamInput {
  content: AkashaBeamInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input AkashaBeamInput {
  nsfw: Boolean
  tags: [BeamLabeledInput]
  appID: CeramicStreamID!
  active: Boolean!
  content: [BeamBlockRecordInput]!
  mentions: [DID]
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
  embeddedStream: BeamEmbeddedTypeInput
}

input BeamLabeledInput {
  value: String!
  labelType: String!
}

input BeamBlockRecordInput {
  order: Int!
  blockID: CeramicStreamID!
}

input BeamEmbeddedTypeInput {
  label: String!
  embeddedID: CeramicStreamID!
}

input CreateOptionsInput {
  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean
}

type UpdateAkashaBeamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeam!
  clientMutationId: String
}

input UpdateAkashaBeamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaBeamInput!
  clientMutationId: String
}

input PartialAkashaBeamInput {
  nsfw: Boolean
  active: Boolean
}

type EnableIndexingAkashaBeamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeam
  clientMutationId: String
}

input EnableIndexingAkashaBeamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaBeamStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeamStream!
  clientMutationId: String
}

input SetAkashaBeamStreamInput {
  content: AkashaBeamStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaBeamStreamInput {
  appID: CeramicStreamID
  active: Boolean!
  beamID: CeramicStreamID!
  status: AkashaBeamStreamModerationStatus
  createdAt: DateTime!
  moderationID: CeramicStreamID
}

type UpdateAkashaBeamStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeamStream!
  clientMutationId: String
}

input UpdateAkashaBeamStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaBeamStreamInput!
  clientMutationId: String
}

input PartialAkashaBeamStreamInput {
  active: Boolean
  status: AkashaBeamStreamModerationStatus
}

type EnableIndexingAkashaBeamStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBeamStream
  clientMutationId: String
}

input EnableIndexingAkashaBeamStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaBlockStoragePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBlockStorage!
  clientMutationId: String
}

input SetAkashaBlockStorageInput {
  content: AkashaBlockStorageInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaBlockStorageInput {
  kind: AkashaBlockStorageBlockDef
  nsfw: Boolean
  active: Boolean!
  blockID: CeramicStreamID!
  content: [BlockLabeledValueInput]!
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
}

input BlockLabeledValueInput {
  label: String!
  value: String!
  propertyType: String!
}

type UpdateAkashaBlockStoragePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBlockStorage!
  clientMutationId: String
}

input UpdateAkashaBlockStorageInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaBlockStorageInput!
  clientMutationId: String
}

input PartialAkashaBlockStorageInput {
  kind: AkashaBlockStorageBlockDef
  active: Boolean
}

type EnableIndexingAkashaBlockStoragePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaBlockStorage
  clientMutationId: String
}

input EnableIndexingAkashaBlockStorageInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateAkashaContentBlockPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlock!
  clientMutationId: String
}

input CreateAkashaContentBlockInput {
  content: AkashaContentBlockInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input AkashaContentBlockInput {
  kind: AkashaContentBlockBlockDef
  nsfw: Boolean
  active: Boolean!
  content: [BlockLabeledValueInput]!
  createdAt: DateTime!
  appVersionID: CeramicStreamID!
}

type UpdateAkashaContentBlockPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlock!
  clientMutationId: String
}

input UpdateAkashaContentBlockInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaContentBlockInput!
  clientMutationId: String
}

input PartialAkashaContentBlockInput {
  kind: AkashaContentBlockBlockDef
  active: Boolean
}

type EnableIndexingAkashaContentBlockPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlock
  clientMutationId: String
}

input EnableIndexingAkashaContentBlockInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaContentBlockStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlockStream!
  clientMutationId: String
}

input SetAkashaContentBlockStreamInput {
  content: AkashaContentBlockStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaContentBlockStreamInput {
  active: Boolean!
  status: AkashaContentBlockStreamModerationStatus
  blockID: CeramicStreamID!
  createdAt: DateTime!
  moderationID: CeramicStreamID
}

type UpdateAkashaContentBlockStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlockStream!
  clientMutationId: String
}

input UpdateAkashaContentBlockStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaContentBlockStreamInput!
  clientMutationId: String
}

input PartialAkashaContentBlockStreamInput {
  active: Boolean
  status: AkashaContentBlockStreamModerationStatus
}

type EnableIndexingAkashaContentBlockStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaContentBlockStream
  clientMutationId: String
}

input EnableIndexingAkashaContentBlockStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaFollowPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaFollow!
  clientMutationId: String
}

input SetAkashaFollowInput {
  content: AkashaFollowInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaFollowInput {
  profileID: CeramicStreamID!
  isFollowing: Boolean!
}

type UpdateAkashaFollowPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaFollow!
  clientMutationId: String
}

input UpdateAkashaFollowInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaFollowInput!
  clientMutationId: String
}

input PartialAkashaFollowInput {
  isFollowing: Boolean
}

type EnableIndexingAkashaFollowPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaFollow
  clientMutationId: String
}

input EnableIndexingAkashaFollowInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaIndexedStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaIndexedStream!
  clientMutationId: String
}

input SetAkashaIndexedStreamInput {
  content: AkashaIndexedStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaIndexedStreamInput {
  active: Boolean!
  status: AkashaIndexedStreamModerationStatus
  stream: CeramicStreamID!
  createdAt: DateTime!
  indexType: String!
  indexValue: String!
  streamType: AkashaIndexedStreamStreamType
  moderationID: CeramicStreamID
}

type UpdateAkashaIndexedStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaIndexedStream!
  clientMutationId: String
}

input UpdateAkashaIndexedStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaIndexedStreamInput!
  clientMutationId: String
}

input PartialAkashaIndexedStreamInput {
  active: Boolean
  status: AkashaIndexedStreamModerationStatus
  streamType: AkashaIndexedStreamStreamType
}

type EnableIndexingAkashaIndexedStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaIndexedStream
  clientMutationId: String
}

input EnableIndexingAkashaIndexedStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaInterestsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaInterestsStream!
  clientMutationId: String
}

input SetAkashaInterestsStreamInput {
  content: AkashaInterestsStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaInterestsStreamInput {
  value: String!
  active: Boolean!
  status: AkashaInterestsStreamModerationStatus
  createdAt: DateTime!
  labelType: String!
  moderationID: CeramicStreamID
}

type UpdateAkashaInterestsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaInterestsStream!
  clientMutationId: String
}

input UpdateAkashaInterestsStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaInterestsStreamInput!
  clientMutationId: String
}

input PartialAkashaInterestsStreamInput {
  active: Boolean
  status: AkashaInterestsStreamModerationStatus
}

type EnableIndexingAkashaInterestsStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaInterestsStream
  clientMutationId: String
}

input EnableIndexingAkashaInterestsStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfile!
  clientMutationId: String
}

input SetAkashaProfileInput {
  content: AkashaProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaProfileInput {
  name: String!
  nsfw: Boolean
  appID: CeramicStreamID!
  links: [ProfileLinkSourceInput]
  avatar: ProfileImageVersionsInput
  createdAt: DateTime!
  background: ProfileImageVersionsInput
  description: String
  appVersionID: CeramicStreamID!
}

input ProfileLinkSourceInput {
  href: URI!
  label: String
}

input ProfileImageVersionsInput {
  default: ProfileImageSourceInput!
  alternatives: [ProfileImageSourceInput]
}

input ProfileImageSourceInput {
  src: URI!
  width: Int!
  height: Int!
}

type CreateAkashaProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfile!
  clientMutationId: String
}

input CreateAkashaProfileInput {
  content: AkashaProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

type UpdateAkashaProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfile!
  clientMutationId: String
}

input UpdateAkashaProfileInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaProfileInput!
  clientMutationId: String
}

input PartialAkashaProfileInput {
  name: String
  links: [ProfileLinkSourceInput]
  avatar: ProfileImageVersionsInput
  background: ProfileImageVersionsInput
  description: String
}

type EnableIndexingAkashaProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfile
  clientMutationId: String
}

input EnableIndexingAkashaProfileInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaProfileInterestsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileInterests!
  clientMutationId: String
}

input SetAkashaProfileInterestsInput {
  content: AkashaProfileInterestsInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaProfileInterestsInput {
  topics: [ProfileLabeledInput]!
}

input ProfileLabeledInput {
  value: String!
  labelType: String!
}

type CreateAkashaProfileInterestsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileInterests!
  clientMutationId: String
}

input CreateAkashaProfileInterestsInput {
  content: AkashaProfileInterestsInput!
  options: SetOptionsInput
  clientMutationId: String
}

type UpdateAkashaProfileInterestsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileInterests!
  clientMutationId: String
}

input UpdateAkashaProfileInterestsInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaProfileInterestsInput!
  clientMutationId: String
}

input PartialAkashaProfileInterestsInput {
  topics: [ProfileLabeledInput]
}

type EnableIndexingAkashaProfileInterestsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileInterests
  clientMutationId: String
}

input EnableIndexingAkashaProfileInterestsInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaProfileStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileStream!
  clientMutationId: String
}

input SetAkashaProfileStreamInput {
  content: AkashaProfileStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaProfileStreamInput {
  appID: CeramicStreamID
  active: Boolean!
  status: AkashaProfileStreamModerationStatus
  createdAt: DateTime!
  profileID: CeramicStreamID!
  moderationID: CeramicStreamID
}

type UpdateAkashaProfileStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileStream!
  clientMutationId: String
}

input UpdateAkashaProfileStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaProfileStreamInput!
  clientMutationId: String
}

input PartialAkashaProfileStreamInput {
  active: Boolean
  status: AkashaProfileStreamModerationStatus
}

type EnableIndexingAkashaProfileStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaProfileStream
  clientMutationId: String
}

input EnableIndexingAkashaProfileStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateAkashaReflectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflect!
  clientMutationId: String
}

input CreateAkashaReflectInput {
  content: AkashaReflectInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input AkashaReflectInput {
  nsfw: Boolean
  tags: [String]
  active: Boolean!
  beamID: CeramicStreamID!
  content: [ReflectProviderValueInput]!
  isReply: Boolean
  mentions: [CeramicStreamID]
  createdAt: DateTime!
  reflection: CeramicStreamID
}

input ReflectProviderValueInput {
  label: String!
  value: String!
  propertyType: String!
}

type UpdateAkashaReflectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflect!
  clientMutationId: String
}

input UpdateAkashaReflectInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaReflectInput!
  clientMutationId: String
}

input PartialAkashaReflectInput {
  nsfw: Boolean
  active: Boolean
}

type EnableIndexingAkashaReflectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflect
  clientMutationId: String
}

input EnableIndexingAkashaReflectInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetAkashaReflectStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflectStream!
  clientMutationId: String
}

input SetAkashaReflectStreamInput {
  content: AkashaReflectStreamInput!
  options: SetOptionsInput
  clientMutationId: String
}

input AkashaReflectStreamInput {
  active: Boolean!
  beamID: CeramicStreamID!
  status: AkashaReflectStreamModerationStatus
  isReply: Boolean
  replyTo: CeramicStreamID
  createdAt: DateTime!
  moderationID: CeramicStreamID
  reflectionID: CeramicStreamID!
}

type UpdateAkashaReflectStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflectStream!
  clientMutationId: String
}

input UpdateAkashaReflectStreamInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialAkashaReflectStreamInput!
  clientMutationId: String
}

input PartialAkashaReflectStreamInput {
  active: Boolean
  beamID: CeramicStreamID
  status: AkashaReflectStreamModerationStatus
  isReply: Boolean
  replyTo: CeramicStreamID
}

type EnableIndexingAkashaReflectStreamPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: AkashaReflectStream
  clientMutationId: String
}

input EnableIndexingAkashaReflectStreamInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}